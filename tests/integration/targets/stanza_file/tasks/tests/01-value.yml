---

## testing value

- name: test-value 1 - set "state=present" and "value=null" and "allow_no_value=false" and fail
  stanza_file:
    path: "{{ output_file }}"
    stanza: cars
    attr: audi
    value: null
    allow_no_value: false
  register: result_value_1
  ignore_errors: true

- name: test-value 1 - verify error message
  assert:
    that:
      - result_value_1 is not changed
      - result_value_1 is failed
      - result_value_1.msg == "Parameter 'value(s)' must be defined if state=present and allow_no_value=False."


- name: test-value 2 - set "state=present" and omit "value" and "allow_no_value=false" and fail
  stanza_file:
    path: "{{ output_file }}"
    stanza: cars
    attr: audi
    allow_no_value: false
  register: result_value_2
  ignore_errors: true

- name: test-value 2 - verify error message
  assert:
    that:
      - result_value_2 is not changed
      - result_value_2 is failed
      - result_value_2.msg == "Parameter 'value(s)' must be defined if state=present and allow_no_value=False."


- name: test-value 3 - add "fav=lemonade" in stanza "drinks:" in specified file
  stanza_file:
    path: "{{ output_file }}"
    stanza: drinks
    attr: fav
    value: lemonade
  register: result3

- name: test-value 3 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 3 - set expected content and get current stanza file content
  set_fact:
    expected3: |

      drinks:
        fav = lemonade
    content3: "{{ output_content.content | b64decode }}"

- name: test-value 3 - Verify content of stanza file is as expected and stanza_file 'changed' is true
  assert:
    that:
      - result3 is changed
      - result3.msg == 'stanza and attr added'
      - content3 == expected3


- name: test-value 4 - add "fav=lemonade" is in stanza "drinks:" again
  stanza_file:
    path: "{{ output_file }}"
    stanza: drinks
    attr: fav
    value: lemonade
  register: result4

- name: test-value 4 - Ensure unchanged
  assert:
    that:
      - result4 is not changed
      - result4.msg == 'OK'


- name: test-value 5 - Ensure "beverage=coke" is in stanza "drinks:"
  stanza_file:
    path: "{{ output_file }}"
    stanza: drinks
    attr: beverage
    value: coke
  register: result5

- name: test-value 5 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 5 - set expected content and get current stanza file content
  set_fact:
    expected5: |

      drinks:
        fav = lemonade
        beverage = coke
    content5: "{{ output_content.content | b64decode }}"

- name: test-value 5 - assert 'changed' is true and content is OK
  assert:
    that:
      - result5 is changed
      - result5.msg == 'attr added'
      - content5 == expected5


- name: test-value 6 - Remove attr "beverage=coke"
  stanza_file:
    path: "{{ output_file }}"
    stanza: drinks
    attr: beverage
    state: absent
  register: result6

- name: test-value 6 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 6 - set expected content and get current stanza file content
  set_fact:
    expected6: |

      drinks:
        fav = lemonade
    content6: "{{ output_content.content | b64decode }}"

- name: test-value 6 - assert 'changed' is true and content is as expected
  assert:
    that:
      - result6 is changed
      - result6.msg == 'attr changed'
      - content6 == expected6


- name: test-value 7 - remove stanza "drinks:""
  stanza_file:
    path: "{{ output_file }}"
    stanza: drinks
    state: absent
  register: result7

- name: test-value 7 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 7 - get current stanza file content
  set_fact:
    content7: "{{ output_content.content | b64decode }}"

- name: test-value 7 - assert 'changed' is true and content is empty
  assert:
    that:
      - result7 is changed
      - result7.msg == 'stanza removed'
      - content7 == "\n"


# allow_no_value

- name: test-value 8 - test allow_no_value
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: skip-name
    allow_no_value: yes
  register: result8

- name: test-value 8 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 8 - set expected content and get current stanza file content
  set_fact:
    content8: "{{ output_content.content | b64decode }}"
    expected8: |

      mysqld:
        skip-name

- name: test-value 8 - assert 'changed' is true and stanza and attr added
  assert:
    that:
      - result8 is changed
      - result8.msg == 'stanza and attr added'
      - content8 == expected8


- name: test-value 9 - test allow_no_value idempotency
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: skip-name
    allow_no_value: yes
  register: result9

- name: test-value 9 - assert 'changed' is false
  assert:
    that:
      - result9 is not changed
      - result9.msg == 'OK'


- name: test-value 10 - test create empty stanza
  stanza_file:
    path: "{{ output_file }}"
    stanza: new_empty_stanza
    allow_no_value: yes
  register: result10

- name: test-value 10 - assert 'changed' is true and stanza added
  assert:
    that:
      - result10 is changed
      - result10.msg == 'only stanza added'


- name: test-value 11 - test create empty stanza idempotency
  stanza_file:
    path: "{{ output_file }}"
    stanza: new_empty_stanza
    allow_no_value: yes
  register: result11

- name: test-value 11 - assert 'changed' is false
  assert:
    that:
      - result11 is not changed
      - result11.msg == 'OK'


- name: test-value 12 - test remove empty stanza
  stanza_file:
    state: absent
    path: "{{ output_file }}"
    stanza: new_empty_stanza
    allow_no_value: yes

- name: test-value 12 - test allow_no_value with loop
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: "{{ item.o }}"
    value: "{{ item.v | d(omit) }}"
    allow_no_value: yes
  loop:
    - { o: "skip-name-resolve" }
    - { o: "max_connections", v: "500" }

- name: test-value 12 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 12 - set expected content and get current stanza file content
  set_fact:
    content12: "{{ output_content.content | b64decode }}"
    expected12: |

      mysqld:
        skip-name
        skip-name-resolve
        max_connections = 500
  
- name: test-value 12 - Verify content of stanza file is as expected
  assert:
    that:
      - content12 == expected12


- name: test-value 13 - change attr with no value to attr with value
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: skip-name
    value: myvalue
  register: result13

- name: test-value 13 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 13 - set expected content and get current stanza file content
  set_fact:
    content13: "{{ output_content.content | b64decode }}"
    expected13: |

      mysqld:
        skip-name = myvalue
        skip-name-resolve
        max_connections = 500

- name: test-value 13 - assert 'changed' and msg 'attr changed' and content is as expected
  assert:
    that:
      - result13 is changed
      - result13.msg == 'attr changed'
      - content13 == expected13


- name: test-value 14 - change attr with value to attr with no value
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: skip-name
    allow_no_value: yes
  register: result14

- name: test-value 14 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 14 - set expected content and get current stanza file content
  set_fact:
    content14: "{{ output_content.content | b64decode }}"
    expected14: |

      mysqld:
        skip-name
        skip-name-resolve
        max_connections = 500

- name: test-value 14 - assert 'changed' is true and msg 'attr changed' and content is as expected
  assert:
    that:
      - result14 is changed
      - result14.msg == 'attr changed'
      - content14 == expected14


- name: test-value 15 - Remove attr with no value
  stanza_file:
    path: "{{ output_file }}"
    stanza: mysqld
    attr: skip-name-resolve
    state: absent
  register: result15

- name: test-value 15 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 15 - set expected content and get current stanza file content
  set_fact:
    content15: "{{ output_content.content | b64decode }}"
    expected15: |

      mysqld:
        skip-name
        max_connections = 500

- name: test-value 15 - assert 'changed' is true and msg 'attr changed' and content is as expected
  assert:
    that:
      - result15 is changed
      - result15.msg == 'attr changed'
      - content15 == expected15


- name: test-value 16 - Clean test file
  copy:
    content: ""
    dest: "{{ output_file }}"
    force: yes

- name: test-value 16 - Ensure "beverage=coke" is created within no stanza
  stanza_file:
    stanza:
    path: "{{ output_file }}"
    attr: beverage
    value: coke
  register: result16

- name: test-value 16 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 16 - set expected content and get current stanza file content
  set_fact:
    expected16: |+
      beverage = coke
      
    content16: "{{ output_content.content | b64decode }}"

- name: test-value 16 - assert 'changed' is true and content is OK (no stanza)
  assert:
    that:
      - result16 is changed
      - result16.msg == 'attr added'
      - content16 == expected16


- name: test-value 17 - Ensure "beverage=coke" is modified as "beverage=water" within no stanza
  stanza_file:
    path: "{{ output_file }}"
    attr: beverage
    value: water
    stanza:
  register: result17

- name: test-value 17 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 17 - set expected content and get current stanza file content
  set_fact:
    expected17: |+
      beverage = water
      
    content17: "{{ output_content.content | b64decode }}"

- name: test-value 17 - assert 'changed' is true and content is OK (no stanza)
  assert:
    that:
      - result17 is changed
      - result17.msg == 'attr changed'
      - content17 == expected17


- name: test-value 18 - remove attr 'beverage' within no stanza
  stanza_file:
    stanza:
    path: "{{ output_file }}"
    attr: beverage
    state: absent
  register: result18

- name: test-value 18 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 18 - get current stanza file content
  set_fact:
    content18: "{{ output_content.content | b64decode }}"

- name: test-value 18 - assert 'changed' is true and attr is removed (no stanza)
  assert:
    that:
      - result18 is changed
      - result18.msg == 'attr changed'
      - content18 == "\n"


- name: test-value 19 - Check add attr without stanza before existing stanza
  block:
    - name: test-value 19 - Add attr with stanza
      stanza_file:
        path: "{{ output_file }}"
        stanza: drinks
        attr: beverage
        value: water
    - name: test-value 19 - Add attr without stanza
      stanza_file:
        path: "{{ output_file }}"
        stanza:
        attr: like
        value: tea

- name: test-value 19 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 19 - set expected content and get current stanza file content
  set_fact:
    expected19: |
      like = tea

      drinks:
        beverage = water
    content19: "{{ output_content.content | b64decode }}"

- name: test-value 19 - Verify content of stanza file is as expected
  assert:
    that:
      - content19 == expected19


- name: test-value 20 - Check add attr with empty string value
  block:
    - name: test-value 20 - Remove drinks
      stanza_file:
        path: "{{ output_file }}"
        stanza: drinks
        state: absent
    - name: test-value 20 - Remove tea
      stanza_file:
        path: "{{ output_file }}"
        stanza:
        attr: like
        value: tea
        state: absent
    # See https://github.com/ansible-collections/community.general/issues/3031
    - name: test-value 20 - Tests with empty strings
      stanza_file:
        path: "{{ output_file }}"
        stanza: "{{ item.stanza | d('extensions') }}"
        attr: "{{ item.attr }}"
        value: ""
        allow_no_value: "{{ item.no_value | d(omit) }}"
      loop:
        - attr: evolve
        - attr: regress
        - stanza: foobar
          attr: foo
          no_value: true
        - attr: improve
          no_value: true

- name: test-value 20 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 20 - set expected content and get current stanza file content
  set_fact:
    expected20: |+
      
      extensions:
        evolve = 
        regress = 
        improve = 
      foobar:
        foo = 
    content20: "{{ output_content.content | b64decode }}"

- name: test-value 20 - Verify content of stanza file is as expected
  assert:
    that:
      - content20 == expected20


- name: test-value 21 - Create starting stanza file
  copy:
    # The content below is the following text file with BOM:
    # stanza1:
    #   var1=aaa
    #   var2=bbb
    # stanza2:
    #   var3=ccc
    content: !!binary |
      77u/c2VjdGlvbjE6CiAgdmFyMT1hYWEKICB2YXIyPWJiYgpzZWN0aW9uMjoKICB2YXIzPWNjYwo=
    dest: "{{ output_file }}"

- name: test-value 21 -  Test stanza breakage
  stanza_file:
    path: "{{ output_file }}"
    stanza: stanza1
    attr: var4
    value: 0
  register: result21

- name: test-value 21 - read content from output file
  slurp:
    src: "{{ output_file }}"
  register: output_content

- name: test-value 21 - set expected content and get current stanza file content
  set_fact:
    expected21: |
      stanza1:
        var1=aaa
        var2=bbb
        var4 = 0
      stanza2:
        var3=ccc
    content21: "{{ output_content.content | b64decode }}"

- name: test-value 21 - Verify content of stanza file is as expected
  assert:
    that:
      - result21 is changed
      - result21.msg == 'attr added'
      - content21 == expected21
